# Itinerary

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Itinerary

You are building a day planning application. Users will provide a list of expected
times for activities and you will determine if they have enough time in the day to fit those activities.

Activities are provided as a keyword lists of times using only `:minutes`, and `:hours`.

Given a start time and and end time, your `Itinerary` should determine if they have enough time
to complete all of their activities.

<!-- livebook:{"force_markdown":true} -->

```elixir
activities = [hours: 2, minutes: 30, hours: 4.5, minutes: 10] # ~430 minutes of activities
start = DateTime.new!(~D[2022-04-24], ~T[12:00:00])
finish = DateTime.new!(~D[2022-04-24], ~T[20:00:00]) # 8 hours or 480 minutes of time

Itinerary.has_time?(start, finish, activities)
true
```

`has_time?/3` should be inclusive, so one hour of activities should fit into one hour of time.

<!-- livebook:{"force_markdown":true} -->

```elixir
activities = [hours: 1]
start = DateTime.new!(~D[2022-04-24], ~T[12:00:00])
finish = DateTime.new!(~D[2022-04-24], ~T[13:00:00])

Itinerary.has_time?(start, finish, activities)
true
```

Enter your solution below.

```elixir
defmodule Itinerary do
  def has_time?(start, finish, activities) do
    available_mins = DateTime.diff(finish, start, :minute)

    activities_mins =
      Enum.reduce(activities, 0, fn {unit, amount}, acc ->
        case unit do
          :hours -> amount * 60 + acc
          :minutes -> amount + acc
        end
      end)

    available_mins >= activities_mins
  end
end

activities = [hours: 1]
start = DateTime.new!(~D[2022-04-24], ~T[12:00:00])
finish = DateTime.new!(~D[2022-04-24], ~T[13:00:00])

Itinerary.has_time?(start, finish, activities)

Utils.feedback(:itinerary, Itinerary)
```

```elixir
# INPUTS = Keyword list, Start Time, End Time
# OUTPUT = True or False

# Problem = Is the time between Start and End enough to fit all of the activities?
# I need to know:
# 1 Amount of minutes between Start and End (inclusive)
# 2 Amount of minutes of activities
# 3 Difference between the two

# 1 INPUT: Two times
# 1 OUTPUT: Minutes
# Subtract the end time to the start time (diff/3?)

start = DateTime.new!(~D[2022-04-24], ~T[12:00:00])
finish = DateTime.new!(~D[2022-04-24], ~T[13:00:00])
available_mins = DateTime.diff(finish, start, :minute)

# 2 INPUT: Keyword List
# 2 OUTPUT: Minutes
# Problem / Solution
# Go through the keyword list, convert all activities to minutes, add them all up.

activities = [hours: 2, minutes: 30, hours: 4.5, minutes: 10]

activities_mins =
  Enum.reduce(activities, 0, fn {unit, amount}, acc ->
    case unit do
      :hours -> amount * 60 + acc
      :minutes -> amount + acc
    end
  end)

# 3 INPUT minutes available & minutes of activities
# 3 OUTPUT true or false
# Problem / Solution
# If minutes available > minutes of activities, then true. Else false.
IO.inspect(available_mins)
IO.inspect(activities_mins)
available_mins > activities_mins
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish itinerary exercise"
```

## Up Next

| Previous                               | Next                                     |
| -------------------------------------- | ---------------------------------------: |
| [Datetime](../reading/datetime.livemd) | [Timeline](../exercises/timeline.livemd) |
