# Number Finder

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Number Finder

Create a `NumberFinder` module which can find the `smallest/1` number in a list, and the `largest/1` number in a list.

<!-- livebook:{"force_markdown":true} -->

```elixir
NumberFinder.smallest([2, 3, 1])
1

NumberFinder.largest([2, 3, 1])
3
```

```elixir
defmodule NumberFinder do
  @doc """
  Find the smallest number in a list

  ## Examples

    iex> NumberFinder.smallest([2, 3, 1])
    1
    iex> NumberFinder.smallest([2, 2, 3, 4])
    2
    iex> NumberFinder.smallest([2, 2, 3, 4, 10, 20, -3])
    -3
  """

  ## Input - Output: inputs a list - outputs a number
  ## Potential solution: go through the list and 
  ## keep the smallest number found in the accumulator.
  ## If the current number is smaller than the current accumulator, update the accumulator

  def smallest(number_list) do
    ## Enum.min(number_list) - This works
    ## Enum.reduce([1, 2, 3], fn(number, acc) -> if number < acc do number end end)
    Enum.reduce(number_list, 4, fn number, smallest ->
      if number < smallest do
        number
      end
    end)
  end

  @doc """
  Find the largest number in a list

  ## Examples

    iex> NumberFinder.largest([2, 3, 1])
    3
    iex> NumberFinder.largest([2, 2, 3, 4, 4])
    4
    iex> NumberFinder.largest([2, 2, 3, 4, 10, 20, -3])
    20
  """
  def largest(number_list) do
  end
end

NumberFinder.smallest([2, 2, 3, 4])
```

```elixir
def TestModule
def smallest(number_list) do
   Enum.reduce(number_list, smallest, fn number, smallest -> IO.puts(number, smallest) end)
      #  if number < smallest do  smallest = number end     end)
   end
end
TestModule.smallest([1,2])


```

```elixir
Enum.reduce([1, 2, 3], acc, fn number, acc ->
  if number < acc do
    acc = number
  end
end)

# numbernumber + acc end)
# Enum.reduce([1, 2, 3], 0, fn(x, acc) -> x + acc end)
```

## Up Next

| Previous                           | Next                                                   |
| ---------------------------------- | -----------------------------------------------------: |
| [Reduce](../reading/reduce.livemd) | [Weighted Voting](../exercises/weighted_voting.livemd) |
